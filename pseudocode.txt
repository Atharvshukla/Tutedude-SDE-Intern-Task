VideoLibraryPage
1. Display a list of hardcoded JavaScript playlists
2. For each playlist:
   a. Show playlist title, description, and thumbnail
   b. Provide a link to view the playlist details
3. Navigation:
   a. Back to dashboard

   PlaylistPage(playlistId)
1. Find the playlist by playlistId
2. If playlist is found:
   a. Display playlist title and description
   b. List all videos in the playlist
      i. Show video title and duration
      ii. Provide a link to watch the video
3. Navigation:
   a. Back to video library


   VideoPage(playlistId, videoId)
1. Find the playlist and video by their IDs
2. If video is found:
   a. Display video title and playlist title
   b. Render EnhancedVideoPlayer with video details
3. Navigation:
   a. Back to playlist


VideoPlayer(videoId, url, duration)
1. Initialize state:
   a. progress: tracks video progress
   b. isPlaying: tracks if video is playing
   c. isBuffering: tracks buffering state
   d. lastPositionRef: tracks last watched position
   e. watchedIntervalsRef: array of watched time intervals

2. On component mount:
   a. Load saved progress from localStorage

3. When video plays:
   a. Set isPlaying to true
   b. Start interval to update UI

4. When video pauses:
   a. Set isPlaying to false
   b. Clear update interval

5. On video progress update:
   a. If video is playing:
      i. Get current position in seconds
      ii. If position changed:
         - Create new interval (lastPosition â†’ currentPosition)
         - Add to watched intervals if continuous
         - Save updated progress
         - Update last position reference

6. When user seeks:
   a. Update last position reference

7. When saving progress:
   a. Merge overlapping intervals
   b. Calculate total watched seconds
   c. Calculate progress percentage
   d. Create updated progress object
   e. Save to localStorage
   f. Update state and references

8. Interval merging algorithm:
   a. Sort intervals by start time
   b. Initialize result with first interval
   c. For each remaining interval:
      i. If current interval overlaps with next:
         - Merge them
      ii. Else:
         - Add current to result
         - Move to next interval
   d. Add final interval to result
   e. Return merged intervals

9. Render:
   a. Video player component
   b. Loading indicator during buffering
   c. Progress display with watched time and progress bar

Backend API Design:-
1. /api/video-library
   - GET: Return all available playlists

2. /api/playlists/:playlistId
   - GET: Return details for a specific playlist

3. /api/videos/:videoId
   - GET: Return details for a specific video

4. /api/progress
   - GET: Get user's progress for all videos
   - GET /:videoId: Get progress for specific video
   - POST /:videoId: Update progress for a video
     a. Request body:
        - watchedIntervals: array of {start, end}
        - totalWatchedSeconds: number
        - progressPercentage: number
     b. Response: Updated progress object

5. /api/analytics
   - GET: Get learning statistics for the user

   Users
- id: primary key
- email: string
- name: string

Playlists
- id: primary key
- title: string
- description: string
- thumbnailUrl: string

Videos
- id: primary key
- playlistId: foreign key
- title: string
- url: string
- duration: number

Progress
- id: primary key
- userId: foreign key
- videoId: foreign key
- watchedIntervals: JSON array of {start, end}
- totalWatchedSeconds: number
- progressPercentage: number
- lastUpdated: timestamp

Landing Page:-
HomePage
1. Initialize Supabase client
2. Check user session on component mount
   a. If session exists, redirect to dashboard
   b. Set loading state to false
3. Render:
   a. Loading indicator if still loading
   b. Main content:
      i. Title: "Smart Video Learning Platform"
      ii. Description: "Track your learning progress intelligently..."
      iii. Buttons:
         - "Get Started" (link to login)
         - "Browse Courses" (link to courses)
      iv. Features:
         - Smart Progress: "Only unique views count towards progress"
         - Resume Anywhere: "Continue where you left off"
         - Detailed Analytics: "Track your learning journey"

         Dashboard:-
         DashboardPage
1. Initialize state variables:
   a. courses: list of user's courses
   b. searchQuery: current search input
   c. searchResults: results from YouTube search
   d. isLoading, isSearching, isAdding: loading states
2. Load courses on component mount
3. Define functions:
   a. loadCourses: fetch user's courses from API
   b. handleSearch: search YouTube playlists based on searchQuery
   c. handleAddCourse: add selected playlist to user's library
   d. navigateToVideoLibrary: redirect to video library page
4. Render:
   a. Loading indicator if courses are loading
   b. Dashboard content:
      i. Title: "Your Learning Dashboard"
      ii. Buttons:
         - "JavaScript Video Library" (navigate to video library)
         - SignOutButton
      iii. Search input and button
      iv. Search results (if any)
      v. User's courses (if any)

      YouTube api :-

      YouTubeAPIRoute
1. GET request:
   a. Extract query parameter from request URL
   b. If query is missing, return error
   c. Search YouTube playlists using Google API
   d. Return search results or error

2. POST request:
   a. Extract playlistId from request body
   b. If playlistId is missing, return error
   c. Authenticate user using Supabase
   d. Fetch playlist details from YouTube
   e. If playlist not found, return error
   f. Fetch videos from playlist
   g. Create course in Supabase database
   h. Add videos to the course in database
   i. Return success response with course and videos

   course:-

CourseDetailsAPIRoute
1. GET request:
   a. Extract course ID from request parameters
   b. Fetch course details using API
   c. Return course data or error

   Using Supabase :-

   DatabaseMigration
1. Create profiles table:
   a. Store user profile information
   b. Link to Supabase auth.users

2. Create courses table:
   a. Store course information

3. Create videos table:
   a. Store video information for each course

4. Create video_progress table:
   a. Track user progress for each video
   b. Store watched intervals as JSONB

5. Enable Row Level Security (RLS) on all tables

6. Define policies for authenticated users:
   a. Profiles:
      i. Users can view and update their own profile
   b. Courses:
      i. Anyone can view courses
   c. Videos:
      i. Anyone can view videos
   d. Video progress:
      i. Users can view, update, and insert their own progress